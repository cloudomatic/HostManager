#!/bin/bash

project_name="host-manager"
image_name=${project_name}:0.9


#
# Give the user some suggestions for running inside a dev container
#
cheat_sheet() {
 echo -e ""
 echo -e "Run a unit tests:"
 echo -e "   cd /src/server; mvn -o test -Dtest=TestApi#testShellCommand\n"
 echo -e "To rebuild/re-run the Java server, execute:\n"
 echo -e "   kill -9 \`ps -ef | grep java | grep -v grep | awk '{print $1}' | xargs\`"
 echo -e "   mvn package"
 echo -e "   cd /src/server cd /src/server && java -jar /src/server/target/server-1.0.jar\n"
 echo -e "Check the status of the API service:\n"
 echo -e "   curl -vks http://localhost/api/v1/status\n"
 echo -e "Restart the React dev server:\n"
 echo -e "   kill -9 \`ps -ef | grep node | grep -v grep | awk '{print $1}' | xargs\`"
 echo -e "   cd /src/ui && nohup yarn start &\n"
 echo ""
}

#
# Build a development image, to speed up launches of a development container
# and enable a developer to work offline
#
development_image() {
  docker build -f ./etc/Dockerfile_dev -t ${project_name}-develop:0.9 .
}

#
# Clean up the dev environment
#
cleanup() {
  docker stop host-manager-test-container
}

#
# Test the API running at a particular endpoint
#
test_api() {
  api_endpoint=$1
  if [ -z $api_endpoint ]; then
    echo -e "\nUsage: $0 test_api https://endpoint-to-your-deployed-api-service\n"
    exit 1
  fi

  # Set TRACE=true here to watch the tests run, false for silent mode
  if (true); then
    # Run a test container with the integration tests (set TRACE to true for debug info)
    docker run -it --rm --name ${project_name}-integration-tests \
      --network host \
      -v $(pwd):/src \
      -e TRACE=$TRACE \
      -e API_ENDPOINT="$api_endpoint" \
      alpine:latest \
      sh -c 'apk update && apk add python3 bash py3-pip jq curl && pip install requests urllib3 && python3 /src/server/src/test/python/IntegrationTests.py $API_ENDPOINT'
  fi
}

#
# Test an image of the API service using the integration tests.
#
test_image() {
  docker network create testing-the-${project_name}-image >/dev/null 2>&1
  # Select a port not likely to be in use, or use a randomizer to select one
  port=83

  if (true); then
   docker run -d --rm --name ${project_name}-test-container \
    --network testing-the-${project_name}-image  \
    -v $(pwd):/src \
    -p $port:80 \
    -e ADMIN_USERNAME=admin \
    -e ADMIN_PASSWORD=admin \
    -e OFFLINE_MODE=false \
    $image_name
  fi

  TRACE=true test_api "http://localhost:83"
}

#
# Push the image to the non-production registry
#
push_image() {
  echo -e "There is, at present, no remote image registry to push to.  This step pushes the image to your QA image_repository, where it will be available to deployment clusters.\n"
}

#
# Promote the image to the production image registry
#
promote_image() {
  echo -e "The promotion function is not yet implemented.  This function would be used to, e.g. perform a security scan (e.g. Veracode) of the image before moving to the production image registry\n"
} 

#
# Create a production-ready Docker image
#
build_image() {
  docker build -f ./Dockerfile -t ${image_name} .
}

#
# Create a pseudo-Kubernetes cluster using Kind
#
create_cluster() {
  check_for kind
  kind create cluster
}

#
# Build the API server jar and static content
#
build_artifacts() {
 docker run -it --rm --name ${project_name}-building-artifacts \
    -v $(pwd):/src \
    alpine:latest sh -c 'rm /src/artifacts.zip >>/dev/null; apk update && apk add bash zip && cd /src && ./build setup_development_container && cd /src/ui && yarn build && cd /src/server && mvn compile assembly:single && cd ./target && mv ./server-1.0-jar-with-dependencies.jar ./server.jar && zip /src/artifacts.zip ./server.jar  && cd /src/ui && mv build wwwroot && zip -r /src/artifacts.zip ./wwwroot'
}

#
# Recompile and re-run the API server
#
restart_server() {
  echo "Shutting down server..."
  kill -9 `ps -ef | grep java | grep jar | grep -v grep | awk '{print $1}'`
  cd /src/server
  mvn package -DskipTests
  echo "Starting API server..."
  cd /src/server && java -jar /src/server/target/server-1.0.jar
}

#
# Test the dev container to see if both API and UI servers are running
#
test_development_container() {
  echo ""
  echo "Checking the API server:"
  echo ""
  if [ `curl -s http://localhost/api/v1/status | grep status | wc -l` -gt 0 ]; then
    echo "    OK"
  else
    echo "    Did not find the API server running via curl -s http://localhost/api/v1/status"
  fi
  echo ""
  echo "Checking the UI server:"
  echo ""
  if [ `curl -s http://localhost:3000/index.html | grep "Host Manager" | wc -l` -gt 0 ]; then
    echo "    OK"
  else
    echo "    Did not find the UI running via curl -s http://localhost:3000/index.html"
  fi
  echo ""
}

#
# Run a development container with the source worktree mounted
#
run_development_container() {
    docker run -it --rm --name ${project_name}-dev-container \
    -v $(pwd):/src \
    -p 3000:3000 \
    -p 443:443 \
    -p 80:80 \
    -e ADMIN_USERNAME=admin \
    -e ADMIN_PASSWORD=admin \
    -e OFFLINE_MODE=false \
    alpine:latest sh -c 'apk update && apk add bash && cd /src && ./build setup_development_container && cd /src && ./build start_development_container_services && echo "Connect to http://localhost:3000 to run the desktop, or run \"./build test_dev_container\" to validate the API and UI servers" && sh'
}

#
# Start the API (Java) server and the React dev server
#
start_development_container_services() {
  echo "Starting UI dev server..."
  cd /src/ui && nohup yarn start &
  echo "Starting API server..."
  cd /src/server && nohup java -jar /src/server/target/server-1.0.jar &
  echo "Waiting for servers to start (10 seconds)...."
  sleep 10
  test_development_container
  echo -e "Run\n     ./build cheat_sheet \n\nfor a list of build/deploy options\n"
}

#
# Setup a dev container.  Note that this is called from etc/Dockerfile_dev
#
setup_development_container() {
      cd /src/ui
      #mkdir /src/ui/node_modules
      mkdir /node_modules
      ln -s /node_modules /src/ui/node_modules 2>/dev/null
      apk update
      apk add bash python3 py3-pip jq curl git yarn openjdk17 maven
      pip install requests urllib3
      yarn install
      cd /src/server
      mvn package
}

#
# Run a development container, in offline mode, with all React/Maven packages
# pre-installed (run ./build development_image while online to create the image)
#
run_offline_development_container() {
  check_docker
  check_image ${project_name}-develop 0.9
  image_missing=$?
  if [ $image_missing -ne 0 ]; then
    echo "Docker is not available and/or did not find an image named ${project_name}-develop:1.0.  Launch Docker and run ./build development_image to create it, or run ./build run_development_container."
    exit 1
  fi
  docker run -it --rm --name ${project_name}-develop \
    -v $(pwd):/src \
    -p 3000:3000 \
    -p 443:443 \
    -p 80:80 \
    -e ADMIN_USERNAME=admin \
    -e ADMIN_PASSWORD=admin \
    -e OFFLINE_MODE=true \
    ${project_name}-develop:0.9 sh -c "cd /src && ./build start_development_container_services && sh"
}

#
## A visually appealing pause/progress bar
#
wait_for() { ##
  seconds=$1
  for i in $(seq $seconds); do
    echo -e ".\c"
    sleep 1
  done
  echo -e "\n"
}

#
# Check to see if a command is installed
#
check_for() { ##
  command=$1
  $command > /dev/null
  if [ $? -gt 0 ]; then
    echo -e "\n$command is not installed.  Install a package for $command and re-run."
    exit 1
  fi
}

#
# Deploy the project image to a Kubernetes cluster.  https://labs.play-with-k8s.com/ is available to test this function.
# 
deploy_to_kubernetes() {
  kubectl get nodes
  if [ $? -gt 0 ]; then
    echo -e "\nkubectl is not installed or is not connected to a cluster.  Login to a Kubernetes clusting using kubectl and try the deployment again.\n"
    exit 1
  fi
  namespace=$1
  release_label=$2
  image=$3
  if [ -z $namespace ] || [ -z $release_label ] || [ -z image ]; then
    echo -e "\nUsage: ./build deploy_to_kubernetes <namespace> <release_label> <image_name>\n"
    echo -e " e.g.: ./build deploy_to_kubernetes MY-CLUSTER-NAMESPACE dev-1.0.0 $image_name\n"
    exit 1
  fi
  if [ `echo $release_label | grep _ | wc -l` -gt 0 ]; then 
    echo -e "\nA Kubernetes release label cannot contain underscores.  Try:\n"
    suggestion=`echo $release_label | sed 's/_/-/g'`
    echo -e "./build deploy_to_kubernetes $namespace $suggestion $image\n"
    exit 1
  fi
  echo -e "Deploying $image as release label: $release_label in namespace $namespace\c"
  cat ./etc/k8s.template.yaml | sed "s/\${image_name}/$image/g" | sed "s/\${release_label}/$release_label/g" > /tmp/$release_label.deploy.yaml
  cat /tmp/$release_label.deploy.yaml
  kubectl -n $namespace apply -f /tmp/$release_label.deploy.yaml
  error=$?
  if [ $error -eq 0 ]; then
    wait_for 5
  else
    echo "build: Received error $error from command: kubectl -n $namespace apply -f /tmp/$release_label.deploy.yaml"
    cat /tmp/$release_label.deploy.yaml
    exit 1
  fi
  rm /tmp/$release_label.deploy.yaml
  kubectl -n $namespace get events --sort-by='.lastTimestamp' | tail -5
}

#
# Undeploy from kubernetes
#
undeploy_from_kubernetes() {
  namespace=$1
  release_label=$2
  if [ -z $namespace ] || [ -z $release_label ]; then
    echo -e "\nUsage: ./build undeploy_from_kubernetes <namespace> <release_label> <image_name>\n"
    echo -e " e.g.: ./build undeploy_from_kubernetes MY-CLUSTER-NAMESPACE dev-1.0.0\n"
    exit 1
  fi
  kubectl delete --all -n $namespace -l hostmanager-${release_label}
  error=$?
  if [ $error -eq 0 ]; then
    wait_for 5
  else
    echo "build: Received error $error from command: kubectl delete --all -n $namespace -l hostmanager-${release_label}"
    exit 1
  fi
  kubectl -n $namespace get events --sort-by='.lastTimestamp' | tail -5
}

  
#
# Setup Docker on Raspbian if needed
#
setup_docker() {
  os=`cat /etc/os-release | grep '^NAME=' | cut -f2 -d'='`
  echo "Detected OS $os"
  if true; then
    if false; then
			# Add Docker's official GPG key:
			sudo apt-get update
			sudo apt-get install ca-certificates curl gnupg
			sudo install -m 0755 -d /etc/apt/keyrings
			curl -fsSL https://download.docker.com/linux/raspbian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
			sudo chmod a+r /etc/apt/keyrings/docker.gpg

			# Set up Docker's Apt repository:
			echo \
				"deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/raspbian \
				"$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
				sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
			sudo apt-get update
			sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    fi
    # Alternate method if the above fails
    if true; then
			# https://download.docker.com/linux/raspbian/dists/bullseye/pool/stable/armhf/
      sudo apt-get update
      sudo apt full-upgrade
      sudo apt-get install -y vim
			curl -vks -O https://download.docker.com/linux/raspbian/dists/bullseye/pool/stable/armhf/docker-buildx-plugin_0.11.2-1~raspbian.11~bullseye_armhf.deb
			curl -vks -O "https://download.docker.com/linux/raspbian/dists/bullseye/pool/stable/armhf/docker-compose-plugin_2.21.0-1~raspbian.11~bullseye_armhf.deb"
			curl -vks -O "https://download.docker.com/linux/raspbian/dists/bullseye/pool/stable/armhf/docker-ce_24.0.6-1~raspbian.11~bullseye_armhf.deb"
			curl -vks -O "https://download.docker.com/linux/raspbian/dists/bullseye/pool/stable/armhf/docker-ce-cli_24.0.6-1~raspbian.11~bullseye_armhf.deb"
			curl -vks -O "https://download.docker.com/linux/raspbian/dists/bullseye/pool/stable/armhf/containerd.io_1.6.24-1_armhf.deb"
			sudo dpkg -i ./containerd* ./docker-ce_* ./docker-ce-cli* ./docker-buildx* ./docker-compose* 
      # /boot/config.txt: Rectangular: dtoverlay=vc4-kms-dpi-hyperpixel4
      # https://github.com/pimoroni/hyperpixel4/issues/177
      # https://learn.pimoroni.com/article/getting-started-with-hyperpixel-4
    fi
  fi
  sudo docker run -it --rm --name testing_docker_setup alpine:latest sh -c "echo Docker checks out"
}

test_docker() {
  sudo docker run -it --rm --name testing_docker_setup alpine:latest "echo Docker checks out"
}


#
# Check to see if Docker is installed and running
#
check_docker() { ##
  if [ `docker --version | grep Docker | grep -v grep | wc -l` -ne 1 ]; then
    echo -e "\n Could not run 'docker --version'.  This program requires Docker to be installed and running on the local host\n"
    exit 1
  fi
}

#
# Check to see if a Docker image exists
#
check_image() {
  if [ $# -lt 2 ]; then
    echo -e "\nUsage: ./build check_image <image-name> <tag>\n"
    exit 1
  fi
  image=$1
  image_tag=$2
  if [ `docker images | grep $image | grep " $image_tag" | wc -l` -lt 1 ]; then
    return 1
  fi
  return 0
}

#
# Build a development image
#
build_dev_image() {
  docker build \
    --build-arg DEV_IMAGE=true \
    --build-arg IMAGE_TAG=1.0 \
    -f ./etc/Dockerfile_dev \
    -t codebook-dev:1.0 .
}

#
# Show available commands
#
help() {
  echo ""
  echo "Usage: "
  echo ""
  echo "  build <command>"
  echo ""
  echo "Suggestion: "
  echo ""
  echo "  ./build run_development_container"
  echo ""
  echo "Commands:"
  echo ""
  cat $0 | grep -v '##' | grep '()' | grep -v cat | cut -f1 -d'(' | sed 's/^/  /g'
  echo ""
}

#
# Start of program
#
if [ $# -eq 0 ]; then
  help ""
else
  $@
fi
